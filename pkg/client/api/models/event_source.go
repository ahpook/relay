// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// EventSource event source
// swagger:model EventSource
type EventSource struct {
	EventSourceSummary

	Lifecycle

	// integration
	Integration *IntegrationSummary `json:"integration,omitempty"`

	// type
	// Required: true
	Type *EventTypeSummary `json:"type"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *EventSource) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 EventSourceSummary
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.EventSourceSummary = aO0

	// AO1
	var aO1 Lifecycle
	if err := swag.ReadJSON(raw, &aO1); err != nil {
		return err
	}
	m.Lifecycle = aO1

	// AO2
	var dataAO2 struct {
		Integration *IntegrationSummary `json:"integration,omitempty"`

		Type *EventTypeSummary `json:"type"`
	}
	if err := swag.ReadJSON(raw, &dataAO2); err != nil {
		return err
	}

	m.Integration = dataAO2.Integration

	m.Type = dataAO2.Type

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m EventSource) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 3)

	aO0, err := swag.WriteJSON(m.EventSourceSummary)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)

	aO1, err := swag.WriteJSON(m.Lifecycle)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO1)

	var dataAO2 struct {
		Integration *IntegrationSummary `json:"integration,omitempty"`

		Type *EventTypeSummary `json:"type"`
	}

	dataAO2.Integration = m.Integration

	dataAO2.Type = m.Type

	jsonDataAO2, errAO2 := swag.WriteJSON(dataAO2)
	if errAO2 != nil {
		return nil, errAO2
	}
	_parts = append(_parts, jsonDataAO2)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this event source
func (m *EventSource) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with EventSourceSummary
	if err := m.EventSourceSummary.Validate(formats); err != nil {
		res = append(res, err)
	}
	// validation for a type composition with Lifecycle
	if err := m.Lifecycle.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIntegration(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *EventSource) validateIntegration(formats strfmt.Registry) error {

	if swag.IsZero(m.Integration) { // not required
		return nil
	}

	if m.Integration != nil {
		if err := m.Integration.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("integration")
			}
			return err
		}
	}

	return nil
}

func (m *EventSource) validateType(formats strfmt.Registry) error {

	if err := validate.Required("type", "body", m.Type); err != nil {
		return err
	}

	if m.Type != nil {
		if err := m.Type.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("type")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *EventSource) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *EventSource) UnmarshalBinary(b []byte) error {
	var res EventSource
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
